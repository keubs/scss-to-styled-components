{"version":3,"sources":["translator.component.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Translator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","output","error","handleChange","bind","assertThisInitialized","translateScss","event","setState","target","value","css","split","forEach","line","newline","replace","v","toUpperCase","trim","fullstring","message","react_default","a","createElement","rows","onChange","type","onClick","style","color","React","Component","App","className","src","logo","alt","translator_component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4RAgEeA,cA5Dd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACZC,MAAO,GACPC,OAAQ,GACRC,MAAO,IAGRV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,CAAAD,IACpBA,EAAKc,cAAgBd,EAAKc,cAAcF,KAAnBX,OAAAY,EAAA,EAAAZ,CAAAD,IAVHA,4EAaLe,GACXZ,KAAKa,SAAS,CAACR,MAAOO,EAAME,OAAOC,gDAIpC,IACC,IAAIC,EAAMhB,KAAKI,MAAMC,MACjBC,EAAS,GACbU,EAAIC,MAAM,MAAMC,QAAQ,SAACC,GACvB,IAAIC,EAAUD,EAAKE,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIA,QACnD,WACA,SAASC,GACP,OAAOA,EAAED,QAAQ,OAAQ,IAAIE,gBAC5BC,OAAOP,MAAM,KAEdQ,EAAaL,EAAQ,GAAK,KAAOA,EAAQ,GAAGC,QAAQ,OAAQ,WAChEf,GAAUmB,IAEZzB,KAAKa,SAAS,CACbP,OAAQA,IAER,MAAMC,GACPP,KAAKa,SAAS,CACbN,MAAOA,EAAMmB,4CAMhB,OACIC,EAAAC,EAAAC,cAAA,oBACQF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,YAAUC,KAAK,IAAIC,SAAU/B,KAAKQ,aAAcO,MAAOf,KAAKI,MAAMC,QAClEsB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACEG,KAAK,SACLC,QAASjC,KAAKW,eAFhB,UAIgBgB,EAAAC,EAAAC,cAAA,WARlB,QASOF,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,YAAUC,KAAK,IAAIf,MAAOf,KAAKI,MAAME,SACrCqB,EAAAC,EAAAC,cAAA,MAAIK,MAAO,CAACC,MAAO,QAASnC,KAAKI,MAAMG,eAvDtB6B,IAAMC,WCgBhBC,MAdf,WACE,OACEX,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAAA,UAAQU,UAAU,cAChBZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCf,EAAAC,EAAAC,cAAA,2DAIFF,EAAAC,EAAAC,cAACc,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.44f95e20.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass Translator extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tinput: '',\n\t\t\toutput: '',\n\t\t\terror: '',\n\t\t}\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.translateScss = this.translateScss.bind(this);\n\t}\n\n  handleChange(event) {\n    this.setState({input: event.target.value});\n  }\n\n  translateScss(){\n  \ttry{\n\t  \tlet css = this.state.input;\n\t  \tlet output = ''\n\t\t  css.split('\\n').forEach((line) => {\n\t\t    let newline = line.replace(/ /, '').replace(/;/, '').replace(\n\t\t      /-([a-z])/,\n\t\t      function(v) {\n\t\t        return v.replace(/(-)?/, '').toUpperCase()\n\t\t      }).trim().split(':')\n\n\t\t    let fullstring = newline[0] + \": \" + newline[1].replace(/(.*)/, '\\'$1\\',\\n')\n\t\t    output += fullstring;\n\t\t  });\n\t\t  this.setState({\n\t\t  \toutput: output\n\t\t  });\n  \t} catch(error){\n  \t\tthis.setState({\n  \t\t\terror: error.message,\n  \t\t});\n  \t}\n  }\n\n\trender() {\n\t\treturn (\n      <div>\n        Enter <br/>\n        <textarea rows=\"5\" onChange={this.handleChange} value={this.state.input}></textarea>\n        <br />\n        <button \n          type=\"button\"\n          onClick={this.translateScss}\n\n        >submit</button><br />\n        Exit <br />\n        <textarea rows=\"5\" value={this.state.output}></textarea>\n        <h2 style={{color: 'red'}}>{this.state.error}</h2>\n      </div>\n\t\t);\n\t}\n}\n\nexport default Translator;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Translator from './translator.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Translate SCSS to styled-component formatting\n        </p>\n      </header>\n      <Translator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}